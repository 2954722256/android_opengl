#version 400 core

layout( points )in;
layout( points, max_vertices = 6) out;


#define PT_EMITTER 0
#define PT_FLARE 1

// Random texture used to generate random numbers in shaders.
uniform sampler1D gRandomTex;
uniform float gGameTime;
uniform float gTimeStep;
uniform vec3 gEmitPosW;

in Particle
{
   vec3 InitialPosW;// : POSITION;
   vec3 InitialVelW;// : VELOCITY;
   vec2 SizeW;//       : SIZE;
   float Age;//        : AGE;
	uint Type;//       : TYPE;
}gin[];

//out ParticleW
//{
out	vec3 InitialPosW;// : POSITION;
out vec3 InitialVelW;// : VELOCITY;
out vec2 SizeW;//       : SIZE;
out float Age;//        : AGE;
out	uint Type;//       : TYPE;
//}gout;

vec3 RandVec3(float offset)
{
	// Use game time plus offset to sample random texture.
	float u = (gGameTime + offset);
	
	// coordinates in [-1,1]
	vec3 v = textureLod(gRandomTex, u, 0).xyz;
	
	return v;
}

// The stream-out GS is just responsible for emitting 
// new particles and destroying old particles.  The logic
// programed here will generally vary from particle system
// to particle system, as the destroy/spawn rules will be 
// different.
void main()
{
//   gin[0].Age += gTimeStep;

	if( gin[0].Type == PT_EMITTER )
	{	
		// time to emit a new particle?
		if( gin[0].Age + gTimeStep> 0.002f )
		{
			for(int i = 0; i < 5; ++i)
			{
				// Spread rain drops out above the camera.
				vec3 vRandom = 35.0f*RandVec3(float(i)/5.0f);
				vRandom.y = 20.0f;
			
				InitialPosW = gEmitPosW.xyz + vRandom;
				InitialVelW = vec3(0.0f, 0.0f, 0.0f);
				SizeW       = vec2(1.0f, 1.0f);
				Age         = 0.0f;
				Type        = PT_FLARE;
			
//				ptStream.Append(p);
                EmitVertex();
			}
			
			// reset the time to emit
			//gin[0].Age = 0.0f;
		}

		// always keep emitters
		//ptStream.Append(gin[0]);
		InitialPosW = gin[0].InitialPosW;
		InitialVelW = gin[0].InitialVelW;
		SizeW       = gin[0].SizeW;
		Age         = gin[0].Age;
		Type        = gin[0].Type;
		
		EmitVertex();
	}
	else
	{
		// Specify conditions to keep particle; this may vary from system to system.
		if( gin[0].Age <= 3.0f )
		{
//			ptStream.Append(gin[0]);
			InitialPosW = gin[0].InitialPosW;
			InitialVelW = gin[0].InitialVelW;
			SizeW       = gin[0].SizeW;
			Age         = gin[0].Age + gTimeStep;
			Type        = gin[0].Type;
			
			EmitVertex();
		}
	}
}

#version 330

layout (location = 0) out vec4 fragColor;

uniform mat4 gViewToTexSpace; // Proj*Texture
uniform vec4   gOffsetVectors[14];

	// Coordinates given in view space.
uniform float    gOcclusionRadius    = 0.5f;
uniform float    gOcclusionFadeStart = 0.2f;
uniform float    gOcclusionFadeEnd   = 100.0f;
uniform float    gSurfaceEpsilon     = 0.05f;

uniform int      gSampleCount        = 14;

uniform sampler2D gNormalDepthMap;
uniform sampler2D gRandomVecMap;

in VertexOut
{
   vec3 ToFarPlane;
   vec2 Tex;
}pin;

// Determines how much the sample point q occludes the point p as a function
// of distZ.
float OcclusionFunction(float distZ)
{
	//
	// If depth(q) is "behind" depth(p), then q cannot occlude p.  Moreover, if 
	// depth(q) and depth(p) are sufficiently close, then we also assume q cannot
	// occlude p because q needs to be in front of p by Epsilon to occlude p.
	//
	// We use the following function to determine the occlusion.  
	// 
	//
	//       1.0     -------------\
	//               |           |  \
	//               |           |    \
	//               |           |      \ 
	//               |           |        \
	//               |           |          \
	//               |           |            \
	//  ------|------|-----------|-------------|---------|--> zv
	//        0     Eps          z0            z1        
	//
	
	float occlusion = 0.0f;
	if(distZ > gSurfaceEpsilon)
	{
		float fadeLength = gOcclusionFadeEnd - gOcclusionFadeStart;
		
		// Linearly decrease occlusion from 1 to 0 as distZ goes 
		// from gOcclusionFadeStart to gOcclusionFadeEnd.	
		occlusion = clamp( (gOcclusionFadeEnd-distZ)/fadeLength, 0.0, 1.0 );
	}
	
	return occlusion;	
}

void main()
{
    // p -- the point we are computing the ambient occlusion for.
	// n -- normal vector at p.
	// q -- a random offset from p.
	// r -- a potential occluder that might occlude p.

	// Get viewspace normal and z-coord of this pixel.  The tex-coords for
	// the fullscreen quad we drew are already in uv-space.
	vec4 normalDepth = textureLod(gNormalDepthMap, pin.Tex, 0.0f);
 
	vec3 n = normalDepth.xyz;
	float pz = normalDepth.w;

	//
	// Reconstruct full view space position (x,y,z).
	// Find t such that p = t*pin.ToFarPlane.
	// p.z = t*pin.ToFarPlane.z
	// t = p.z / pin.ToFarPlane.z
	//
	vec3 p = (pz/pin.ToFarPlane.z)*pin.ToFarPlane;
	
	// Extract random vector and map from [0,1] --> [-1, +1].
	vec3 randVec = 2.0f* textureLod(gRandomVecMap, 4.0f * pin.Tex, 0.0f).rgb - 1.0f;

	float occlusionSum = 0.0f;
	
	// Sample neighboring points about p in the hemisphere oriented by n.
	// [unroll]
	for(int i = 0; i < gSampleCount; ++i)
	{
		// Are offset vectors are fixed and uniformly distributed (so that our offset vectors
		// do not clump in the same direction).  If we reflect them about a random vector
		// then we get a random uniform distribution of offset vectors.
		vec3 offset = reflect(gOffsetVectors[i].xyz, randVec);
	
		// Flip offset vector if it is behind the plane defined by (p, n).
		float flip = sign( dot(offset, n) );
		
		// Sample a point near p within the occlusion radius.
		vec3 q = p + flip * gOcclusionRadius * offset;
		
		// Project q and generate projective tex-coords.  
		 vec4 projQ = gViewToTexSpace * vec4(q, 1.0f);
		 projQ /= projQ.w;
		//vec4 projQ = vec4(q, 1.0);

		// Find the nearest depth value along the ray from the eye to q (this is not
		// the depth of q, as q is just an arbitrary point near p and might
		// occupy empty space).  To find the nearest depth we look it up in the depthmap.

		float rz = textureLod(gNormalDepthMap, projQ.xy, 0.0f).a;

		// Reconstruct full view space position r = (rx,ry,rz).  We know r
		// lies on the ray of q, so there exists a t such that r = t*q.
		// r.z = t*q.z ==> t = r.z / q.z

		vec3 r = (rz / q.z) * q;
		
		//
		// Test whether r occludes p.
		//   * The product dot(n, normalize(r - p)) measures how much in front
		//     of the plane(p,n) the occluder point r is.  The more in front it is, the
		//     more occlusion weight we give it.  This also prevents self shadowing where 
		//     a point r on an angled plane (p,n) could give a false occlusion since they
		//     have different depth values with respect to the eye.
		//   * The weight of the occlusion is scaled based on how far the occluder is from
		//     the point we are computing the occlusion of.  If the occluder r is far away
		//     from p, then it does not occlude it.
		// 
		
		float distZ = p.z - r.z;
		float dp = max(dot(n, normalize(p - r)), 0.0f);
		float occlusion = dp * OcclusionFunction(-distZ);
		
		occlusionSum += occlusion;
	}
	
	occlusionSum /= float(gSampleCount);
	
	float access = (1.0f - occlusionSum);

	// Sharpen the contrast of the SSAO map to make the SSAO affect more dramatic.
	float color = clamp(pow(access, 4.0f), 0.0, 1.0);
	fragColor = vec4(color, color, color, 1.0f);
}
#version 330

// This statement indicates that the geometry shader 
// will receive point primitives.
layout( points ) in;

// The next statement indicates the kind of primitives
// produced by this geometry shader, and the maximum
// number of vertices that will be output.
//
// In this case, we want to produce a single quad for
// each point received, so we indicate that the output
// will be a triangle strip with a maximum of four vertices.
layout( triangle_strip, max_vertices = 4 ) out;

in VertexOut
{
	vec3 CenterW;
	vec2 SizeW;
}gin[];

out GeoOut
{
    vec3 PosW    /*: POSITION*/;
    vec3 NormalW /*: NORMAL*/;
    vec2 Tex     /*: TEXCOORD*/;
}gout;


uniform vec3 uEyePosW;
uniform mat4 gViewProj;

void main()
{
   //
	// Compute the local coordinate system of the sprite relative to the world
	// space such that the billboard is aligned with the y-axis and faces the eye.
	//

	vec3 up = vec3(0.0f, 1.0f, 0.0f);
	vec3 look = uEyePosW - gin[0].CenterW;
	look.y = 0.0f; // y-axis aligned, so project to xz-plane
	look = normalize(look);
	vec3 right = cross(up, look);

	//
	// Compute triangle strip vertices (quad) in world space.
	//
	float halfWidth  = 0.5f*gin[0].SizeW.x;
	float halfHeight = 0.5f*gin[0].SizeW.y;
	
	vec4 v[4];
	v[0] = vec4(gin[0].CenterW + halfWidth*right - halfHeight*up, 1.0f);
	v[1] = vec4(gin[0].CenterW + halfWidth*right + halfHeight*up, 1.0f);
	v[2] = vec4(gin[0].CenterW - halfWidth*right - halfHeight*up, 1.0f);
	v[3] = vec4(gin[0].CenterW - halfWidth*right + halfHeight*up, 1.0f);
	vec2 gTexC[4];
//	{
		gTexC[0] = vec2(0.0f, 1.0f);
		gTexC[1] = vec2(0.0f, 0.0f);
		gTexC[2] = vec2(1.0f, 1.0f);
		gTexC[3] = vec2(1.0f, 0.0f);
//	};
	
	//
	// Transform quad vertices to world space and output 
	// them as a triangle strip.
	//
	for(int i = 0; i < 4; ++i)
	{
		gl_Position = gViewProj * v[i];
		gout.PosW = v[i].xyz;
		gout.NormalW = look;
		gout.Tex = gTexC[i];
		
		EmitVertex();
	}
	
	EndPrimitive();
}

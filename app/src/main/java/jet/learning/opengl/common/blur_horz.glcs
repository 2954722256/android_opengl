#version 430

const int gBlurRadius = 5;
#define N 256
#define CacheSize (N + 2*gBlurRadius)

uniform float gWeights[11] = 
	{
		0.05f, 0.05f, 0.1f, 0.1f, 0.1f, 0.2f, 0.1f, 0.1f, 0.1f, 0.05f, 0.05f,
	};
	
layout (local_size_x = N) in;

layout (rgba8, binding = 0) uniform image2D gInput;
layout (rgba8, binding = 1) uniform image2D gOutput;

shared vec4 gCache[CacheSize];

void main()
{
    ivec3 groupThreadID = ivec3(gl_LocalInvocationID);
    ivec3 dispatchThreadID = ivec3(gl_GlobalInvocationID);
	//
	// Fill local thread storage to reduce bandwidth.  To blur 
	// N pixels, we will need to load N + 2*BlurRadius pixels
	// due to the blur radius.
	//
	
	// This thread group runs N threads.  To get the extra 2*BlurRadius pixels, 
	// have 2*BlurRadius threads sample an extra pixel.
	if(groupThreadID.x < gBlurRadius)
	{
		// Clamp out of bound samples that occur at image borders.
		int x = max(dispatchThreadID.x - gBlurRadius, 0);
		gCache[groupThreadID.x] = imageLoad(gInput, ivec2(x, dispatchThreadID.y));
	}
	if(groupThreadID.x >= N-gBlurRadius)
	{
		// Clamp out of bound samples that occur at image borders.
		int x = min(dispatchThreadID.x + gBlurRadius, imageSize(gInput).x-1);
		gCache[groupThreadID.x+2*gBlurRadius] = imageLoad(gInput, ivec2(x, dispatchThreadID.y));
	}
	
	// Clamp out of bound samples that occur at image borders.
	gCache[groupThreadID.x+gBlurRadius] = imageLoad(gInput, min(dispatchThreadID.xy, imageSize(gInput)-1));


	// Wait for all threads to finish.
	barrier();
	
	//
	// Now blur each pixel.
	//

	vec4 blurColor = vec4(0, 0, 0, 0);
	
	//[unroll]
	for(int i = -gBlurRadius; i <= gBlurRadius; ++i)
	{
		int k = groupThreadID.x + gBlurRadius + i;
		
		blurColor += gWeights[i+gBlurRadius]*gCache[k];
	}
	
//	gOutput[dispatchThreadID.xy] = blurColor;
	imageStore(gOutput, dispatchThreadID.xy, blurColor);
}
//----------------------------------------------------------------------------------
// File:        NvAppBase/NvFramerateCounter.java
// SDK Version: v1.2 
// Email:       gameworks@nvidia.com
// Site:        http://developer.nvidia.com/
//
// Copyright (c) 2014, NVIDIA CORPORATION. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//  * Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
//  * Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//  * Neither the name of NVIDIA CORPORATION nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
// OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//----------------------------------------------------------------------------------
package com.nvidia.developer.opengl.app;

import com.nvidia.developer.opengl.utils.NvStopWatch;

/**
 * Simple frame rate timer and reporter.
 * 
 * @author Nvidia 2014-9-13 15:45
 * 
 */
public class NvFramerateCounter {

	protected final NvStopWatch m_stopWatch = new NvStopWatch();
	protected int m_reportFrames = 120;
	protected int m_framesSinceReport;
	protected float m_reportRate = 2.0f;
	protected float m_meanFramerate;

	/**
	 * Frame delimiter.
	 * <p>
	 * Call at the end of each frame to mark the end of a frame.
	 * 
	 * @return true if the frame rate stats have been updated by this call and
	 *         should be printed/updated to the user as appropriate
	 */
	public boolean nextFrame() {
		if (!m_stopWatch.isRunning()) {
	        m_stopWatch.start();
	        m_framesSinceReport = 0;
	        return false;
	    }

	    m_framesSinceReport++;

	    // Only report if the number of frames AND the min time are exceeded
	    if (m_framesSinceReport >= m_reportFrames) {
	        float time = m_stopWatch.getTime();
	        if (time > m_reportRate) {
	            m_meanFramerate = m_framesSinceReport / time;
	            m_framesSinceReport = 0;
	            m_stopWatch.reset();
	            return true;
	        }
	    }

	    return false;
	}

	/**
	 * Restarts the counters - should be called when the app has come back after
	 * being paused, etc. Avoids incorrect stats generated by an extremely
	 * "long" frame (which was actually the app sleeping)
	 */
	public void reset() {
		m_framesSinceReport = 0;
	    m_stopWatch.stop();
	    m_stopWatch.reset();
	    m_stopWatch.start();
	}

	/**
	 * Mean frame rate since last report (the last time nextFrame returned
	 * "true")
	 * 
	 * @return the frame rate in frames per second
	 */
	public float getMeanFramerate() {
		return m_meanFramerate;
	}

	/**
	 * Set the report rate in frames.
	 * 
	 * @param frames
	 *            the minimum number of frames that must elapse between each
	 *            mean frame rate update (i.e. between calls to #nextFrame that
	 *            return true)
	 */
	public void setReportFrames(int frames) {
		m_reportFrames = frames;
	}

	/**
	 * Get the report rate in frames.
	 * 
	 * @return the minimum number of frames that must elapse between each mean
	 *         frame rate update (i.e. between calls to #nextFrame that return
	 *         true)
	 */
	public int getReportFrames() {
		return m_reportFrames;
	}

	/**
	 * Set the report rate in seconds
	 * 
	 * @param secs
	 *            the minimum number of seconds of wall-clock time that must
	 *            elapse between each mean frame rate update (i.e. between calls
	 *            to #nextFrame that return true)
	 */
	public void setMaxReportRate(float secs) {
		m_reportRate = secs;
	}

	/**
	 * Set the report rate in seconds
	 * 
	 * @return the minimum number of seconds of wall-clock time that must elapse
	 *         between each mean frame rate update (i.e. between calls to
	 *         #nextFrame that return true)
	 */
	public float getReportRate() {
		return m_reportRate;
	}

}
